//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameOperation.GameOperationServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Leaderboard", Namespace="http://schemas.datacontract.org/2004/07/GameResultService_1")]
    [System.SerializableAttribute()]
    public partial class Leaderboard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameOperationServiceReference.IGameOperationService")]
    public interface IGameOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameOperationService/InserirResultado", ReplyAction="http://tempuri.org/IGameOperationService/InserirResultadoResponse")]
        void InserirResultado(long playerId, long gameID, long win);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameOperationService/InserirResultado", ReplyAction="http://tempuri.org/IGameOperationService/InserirResultadoResponse")]
        System.Threading.Tasks.Task InserirResultadoAsync(long playerId, long gameID, long win);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameOperationService/ListarLeaderboard", ReplyAction="http://tempuri.org/IGameOperationService/ListarLeaderboardResponse")]
        GameOperation.GameOperationServiceReference.Leaderboard[] ListarLeaderboard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameOperationService/ListarLeaderboard", ReplyAction="http://tempuri.org/IGameOperationService/ListarLeaderboardResponse")]
        System.Threading.Tasks.Task<GameOperation.GameOperationServiceReference.Leaderboard[]> ListarLeaderboardAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameOperationServiceChannel : GameOperation.GameOperationServiceReference.IGameOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameOperationServiceClient : System.ServiceModel.ClientBase<GameOperation.GameOperationServiceReference.IGameOperationService>, GameOperation.GameOperationServiceReference.IGameOperationService {
        
        public GameOperationServiceClient() {
        }
        
        public GameOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InserirResultado(long playerId, long gameID, long win) {
            base.Channel.InserirResultado(playerId, gameID, win);
        }
        
        public System.Threading.Tasks.Task InserirResultadoAsync(long playerId, long gameID, long win) {
            return base.Channel.InserirResultadoAsync(playerId, gameID, win);
        }
        
        public GameOperation.GameOperationServiceReference.Leaderboard[] ListarLeaderboard() {
            return base.Channel.ListarLeaderboard();
        }
        
        public System.Threading.Tasks.Task<GameOperation.GameOperationServiceReference.Leaderboard[]> ListarLeaderboardAsync() {
            return base.Channel.ListarLeaderboardAsync();
        }
    }
}
